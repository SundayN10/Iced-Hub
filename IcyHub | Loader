-- IcedHub UI Framework (Linoria-Inspired)
local IcedHubUI = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Utility Functions
local function createGradient(frame, color1, color2)
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, color1 or Color3.fromRGB(35, 35, 35)),
        ColorSequenceKeypoint.new(1, color2 or Color3.fromRGB(25, 25, 25))
    })
    UIGradient.Parent = frame
end

-- Main UI Setup
function IcedHubUI:CreateWindow(config)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "IcedHub"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.Parent = game.Players.LocalPlayer.PlayerGui

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 400, 0, 300) -- Compact for mobile
    MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui

    createGradient(MainFrame)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame

    local TitleBar = Instance.new("Frame")
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0.7, 0, 1, 0)
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = config.Title or "Iced Hub"
    Title.TextColor3 = Color3.fromRGB(200, 200, 200)
    Title.TextSize = 16
    Title.Font = Enum.Font.SourceSansBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TitleBar

    local CloseButton = Instance.new("TextButton")
    CloseButton.Size = UDim2.new(0, 25, 0, 25)
    CloseButton.Position = UDim2.new(1, -30, 0, 2.5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = TitleBar

    local UICornerClose = Instance.new("UICorner")
    UICornerClose.CornerRadius = UDim.new(0, 5)
    UICornerClose.Parent = CloseButton

    -- Dragging
    local dragging, dragInput, dragStart, startPos
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Tab System
    local TabContainer = Instance.new("Frame")
    TabContainer.Size = UDim2.new(1, 0, 0, 30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabContainer.BorderSizePixel = 0
    TabContainer.Parent = MainFrame

    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.FillDirection = Enum.FillDirection.Horizontal
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.Parent = TabContainer

    local ContentFrame = Instance.new("ScrollingFrame")
    ContentFrame.Size = UDim2.new(1, 0, 1, -60)
    ContentFrame.Position = UDim2.new(0, 0, 0, 60)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.BorderSizePixel = 0
    ContentFrame.ScrollBarThickness = 4
    ContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    ContentFrame.Parent = MainFrame

    local ContentListLayout = Instance.new("UIListLayout")
    ContentListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentListLayout.Padding = UDim.new(0, 5)
    ContentListLayout.Parent = ContentFrame
    ContentListLayout.Changed:Connect(function()
        ContentFrame.CanvasSize = UDim2.new(0, 0, 0, ContentListLayout.AbsoluteContentSize.Y + 10)
    end)

    local Tabs = {}
    local CurrentTab = nil

    local UI = {}

    function UI:AddTab(name)
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0, 80, 1, 0)
        TabButton.BackgroundTransparency = 1
        TabButton.Text = name
        TabButton.TextColor3 = Color3.fromRGB(150, 150, 150)
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.SourceSans
        TabButton.Parent = TabContainer

        local TabContent = Instance.new("Frame")
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.Visible = false
        TabContent.Parent = ContentFrame

        local TabListLayout = Instance.new("UIListLayout")
        TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabListLayout.Padding = UDim.new(0, 5)
        TabListLayout.Parent = TabContent
        TabListLayout.Changed:Connect(function()
            ContentFrame.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y + 10)
        end)

        TabButton.MouseButton1Click:Connect(function()
            if CurrentTab then
                CurrentTab.Button.TextColor3 = Color3.fromRGB(150, 150, 150)
                CurrentTab.Content.Visible = false
            end
            TabButton.TextColor3 = Color3.fromRGB(147, 112, 219) -- Purple accent
            TabContent.Visible = true
            CurrentTab = {Button = TabButton, Content = TabContent}
        end)

        table.insert(Tabs, {Button = TabButton, Content = TabContent})
        if #Tabs == 1 then
            TabButton.TextColor3 = Color3.fromRGB(147, 112, 219)
            TabContent.Visible = true
            CurrentTab = {Button = TabButton, Content = TabContent}
        end

        local Tab = {}

        function Tab:AddSection(name)
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Size = UDim2.new(1, -10, 0, 25)
            SectionFrame.BackgroundTransparency = 1
            SectionFrame.Parent = TabContent

            local SectionLabel = Instance.new("TextLabel")
            SectionLabel.Size = UDim2.new(1, 0, 1, 0)
            SectionLabel.BackgroundTransparency = 1
            SectionLabel.Text = name
            SectionLabel.TextColor3 = Color3.fromRGB(147, 112, 219)
            SectionLabel.TextSize = 16
            SectionLabel.Font = Enum.Font.SourceSansBold
            SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
            SectionLabel.Parent = SectionFrame
        end

        function Tab:AddToggle(config)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.Parent = TabContent

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(0.8, 0, 1, 0)
            Label.BackgroundTransparency = 1
            Label.Text = config.Name
            Label.TextColor3 = Color3.fromRGB(200, 200, 200)
            Label.TextSize = 14
            Label.Font = Enum.Font.SourceSans
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = ToggleFrame

            local Toggle = Instance.new("TextButton")
            Toggle.Size = UDim2.new(0, 40, 0, 20)
            Toggle.Position = UDim2.new(1, -40, 0.5, -10)
            Toggle.BackgroundColor3 = config.Default and Color3.fromRGB(147, 112, 219) or Color3.fromRGB(50, 50, 50)
            Toggle.Text = ""
            Toggle.Parent = ToggleFrame

            local UICornerToggle = Instance.new("UICorner")
            UICornerToggle.CornerRadius = UDim.new(0, 4)
            UICornerToggle.Parent = Toggle

            local state = config.Default or false
            Toggle.MouseButton1Click:Connect(function()
                state = not state
                TweenService:Create(Toggle, TweenInfo.new(0.2), {
                    BackgroundColor3 = state and Color3.fromRGB(147, 112, 219) or Color3.fromRGB(50, 50, 50)
                }):Play()
                if config.Callback then config.Callback(state) end
            end)
        end

        function Tab:AddDropdown(config)
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Size = UDim2.new(1, -10, 0, 30)
            DropdownFrame.BackgroundTransparency = 1
            DropdownFrame.Parent = TabContent

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(0.5, 0, 1, 0)
            Label.BackgroundTransparency = 1
            Label.Text = config.Name
            Label.TextColor3 = Color3.fromRGB(200, 200, 200)
            Label.TextSize = 14
            Label.Font = Enum.Font.SourceSans
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = DropdownFrame

            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Size = UDim2.new(0, 100, 0, 20)
            DropdownButton.Position = UDim2.new(1, -100, 0.5, -10)
            DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            DropdownButton.Text = config.Default or config.Options[1]
            DropdownButton.TextColor3 = Color3.fromRGB(200, 200, 200)
            DropdownButton.TextSize = 12
            DropdownButton.Font = Enum.Font.SourceSans
            DropdownButton.Parent = DropdownFrame

            local UICornerButton = Instance.new("UICorner")
            UICornerButton.CornerRadius = UDim.new(0, 4)
            UICornerButton.Parent = DropdownButton

            local OptionFrame = Instance.new("Frame")
            OptionFrame.Size = UDim2.new(0, 100, 0, 0)
            OptionFrame.Position = UDim2.new(1, -100, 0.5, 10)
            OptionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            OptionFrame.BorderSizePixel = 0
            OptionFrame.ClipsDescendants = true
            OptionFrame.Visible = false
            OptionFrame.Parent = DropdownFrame

            local UIListLayout = Instance.new("UIListLayout")
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Parent = OptionFrame

            local options = {}
            for i, option in pairs(config.Options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Size = UDim2.new(1, 0, 0, 20)
                OptionButton.BackgroundTransparency = 1
                OptionButton.Text = option
                OptionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
                OptionButton.TextSize = 12
                OptionButton.Font = Enum.Font.SourceSans
                OptionButton.Parent = OptionFrame

                OptionButton.MouseButton1Click:Connect(function()
                    DropdownButton.Text = option
                    OptionFrame.Visible = false
                    if config.Callback then config.Callback(option) end
                end)

                table.insert(options, OptionButton)
            end
            OptionFrame.Size = UDim2.new(0, 100, 0, #options * 20)

            DropdownButton.MouseButton1Click:Connect(function()
                OptionFrame.Visible = not OptionFrame.Visible
            end)
        end

        function Tab:AddSlider(config)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Size = UDim2.new(1, -10, 0, 40)
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.Parent = TabContent

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(0.5, 0, 0, 20)
            Label.BackgroundTransparency = 1
            Label.Text = config.Name
            Label.TextColor3 = Color3.fromRGB(200, 200, 200)
            Label.TextSize = 14
            Label.Font = Enum.Font.SourceSans
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = SliderFrame

            local ValueLabel = Instance.new("TextLabel")
            ValueLabel.Size = UDim2.new(0, 30, 0, 20)
            ValueLabel.Position = UDim2.new(1, -30, 0, 0)
            ValueLabel.BackgroundTransparency = 1
            ValueLabel.Text = tostring(config.Default or config.Min)
            ValueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            ValueLabel.TextSize = 12
            ValueLabel.Font = Enum.Font.SourceSans
            ValueLabel.Parent = SliderFrame

            local SliderBar = Instance.new("Frame")
            SliderBar.Size = UDim2.new(1, -10, 0, 6)
            SliderBar.Position = UDim2.new(0, 5, 0, 25)
            SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            SliderBar.BorderSizePixel = 0
            SliderBar.Parent = SliderFrame

            local UICornerBar = Instance.new("UICorner")
            UICornerBar.CornerRadius = UDim.new(0, 3)
            UICornerBar.Parent = SliderBar

            local Fill = Instance.new("Frame")
            Fill.Size = UDim2.new((config.Default or config.Min - config.Min) / (config.Max - config.Min), 0, 1, 0)
            Fill.BackgroundColor3 = Color3.fromRGB(147, 112, 219)
            Fill.BorderSizePixel = 0
            Fill.Parent = SliderBar

            local UICornerFill = Instance.new("UICorner")
            UICornerFill.CornerRadius = UDim.new(0, 3)
            UICornerFill.Parent = Fill

            local dragging = false
            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                end
            end)
            SliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local mouseX = input.Position.X
                    local barX = SliderBar.AbsolutePosition.X
                    local barWidth = SliderBar.AbsoluteSize.X
                    local relative = math.clamp((mouseX - barX) / barWidth, 0, 1)
                    local value = config.Min + (config.Max - config.Min) * relative
                    value = math.floor(value + 0.5)
                    Fill.Size = UDim2.new(relative, 0, 1, 0)
                    ValueLabel.Text = tostring(value)
                    if config.Callback then config.Callback(value) end
                end
            end)
        end

        function Tab:AddButton(config)
            local ButtonFrame = Instance.new("TextButton")
            ButtonFrame.Size = UDim2.new(1, -10, 0, 30)
            ButtonFrame.BackgroundColor3 = Color3.fromRGB(147, 112, 219)
            ButtonFrame.BorderSizePixel = 0
            ButtonFrame.Text = config.Name
            ButtonFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
            ButtonFrame.TextSize = 14
            ButtonFrame.Font = Enum.Font.SourceSansBold
            ButtonFrame.Parent = TabContent

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = ButtonFrame

            ButtonFrame.MouseButton1Click:Connect(function()
                if config.Callback then config.Callback() end
            end)

            ButtonFrame.MouseEnter:Connect(function()
                TweenService:Create(ButtonFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(167, 132, 239)}):Play()
            end)
            ButtonFrame.MouseLeave:Connect(function()
                TweenService:Create(ButtonFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(147, 112, 219)}):Play()
            end)
        end

        return Tab
    end

    function UI:Notify(title, message)
        local Notification = Instance.new("Frame")
        Notification.Size = UDim2.new(0, 200, 0, 60)
        Notification.Position = UDim2.new(1, -210, 1, -70)
        Notification.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        Notification.BorderSizePixel = 0
        Notification.Parent = ScreenGui

        createGradient(Notification)

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = Notification

        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Size = UDim2.new(1, -10, 0, 20)
        TitleLabel.Position = UDim2.new(0, 5, 0, 5)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = title
        TitleLabel.TextColor3 = Color3.fromRGB(147, 112, 219)
        TitleLabel.TextSize = 14
        TitleLabel.Font = Enum.Font.SourceSansBold
        TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        TitleLabel.Parent = Notification

        local MessageLabel = Instance.new("TextLabel")
        MessageLabel.Size = UDim2.new(1, -10, 0, 35)
        MessageLabel.Position = UDim2.new(0, 5, 0, 20)
        MessageLabel.BackgroundTransparency = 1
        MessageLabel.Text = message
        MessageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        MessageLabel.TextSize = 12
        MessageLabel.Font = Enum.Font.SourceSans
        MessageLabel.TextWrapped = true
        MessageLabel.TextXAlignment = Enum.TextXAlignment.Left
        MessageLabel.Parent = Notification

        TweenService:Create(Notification, TweenInfo.new(0.3), {Position = UDim2.new(1, -210, 1, -70)}):Play()
        task.delay(3, function()
            TweenService:Create(Notification, TweenInfo.new(0.3), {Position = UDim2.new(1, 0, 1, -70)}):Play()
            task.delay(0.3, function()
                Notification:Destroy()
            end)
        end)
    end

    function UI:Toggle()
        MainFrame.Visible = not MainFrame.Visible
    end

    function UI:Destroy()
        ScreenGui:Destroy()
    end

    CloseButton.MouseButton1Click:Connect(function()
        UI:Destroy()
        UI:Notify("UI", "Closed")
    end)

    CloseButton.MouseEnter:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 95, 95)}):Play()
    end)
    CloseButton.MouseLeave:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 75, 75)}):Play()
    end)

    return UI
end

return IcedHubUI
