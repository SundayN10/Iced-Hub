local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "IcedHub"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

local TS = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

-- Color Palette
local Colors = {
    Primary = Color3.fromRGB(20, 20, 30),
    Secondary = Color3.fromRGB(30, 30, 40),
    Accent = Color3.fromRGB(0, 170, 255),
    AccentHover = Color3.fromRGB(0, 190, 255),
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(180, 180, 180),
    Success = Color3.fromRGB(0, 255, 150),
    Warning = Color3.fromRGB(255, 100, 100)
}

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 650, 0, 450)
mainFrame.Position = UDim2.new(0.5, -325, 0.5, -225)
mainFrame.BackgroundColor3 = Colors.Primary
mainFrame.BackgroundTransparency = 0.1
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui
mainFrame.Visible = false

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 20)
uiCorner.Parent = mainFrame

local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Colors.Primary),
    ColorSequenceKeypoint.new(1, Colors.Secondary)
}
uiGradient.Rotation = 45
uiGradient.Parent = mainFrame

local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 2
uiStroke.Color = Colors.Accent
uiStroke.Transparency = 0.5
uiStroke.Parent = mainFrame

-- Toggle Button with Image
local toggleGui = Instance.new("TextButton")
toggleGui.Size = UDim2.new(0, 60, 0, 60)
toggleGui.Position = UDim2.new(0, 20, 0.5, -30)
toggleGui.BackgroundColor3 = Colors.Accent
toggleGui.Text = ""
toggleGui.Parent = screenGui
local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(1, 0)
toggleCorner.Parent = toggleGui

local toggleIcon = Instance.new("ImageLabel")
toggleIcon.Size = UDim2.new(0, 40, 0, 40)
toggleIcon.Position = UDim2.new(0.5, -20, 0.5, -20)
toggleIcon.BackgroundTransparency = 1
toggleIcon.Image = "rbxassetid://105218292132797"
toggleIcon.Parent = toggleGui

local isOpen = false
toggleGui.MouseButton1Click:Connect(function()
    isOpen = not isOpen
    mainFrame.Visible = isOpen
    TS:Create(toggleGui, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        BackgroundColor3 = isOpen and Colors.Success or Colors.Accent,
        Size = isOpen and UDim2.new(0, 55, 0, 55) or UDim2.new(0, 60, 0, 60)
    }):Play()
    TS:Create(toggleIcon, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
        ImageTransparency = isOpen and 0.2 or 0
    }):Play()
end)

-- Top Bar with Image
local topBar = Instance.new("Frame")
topBar.Size = UDim2.new(1, 0, 0, 50)
topBar.BackgroundColor3 = Colors.Secondary
topBar.BackgroundTransparency = 0.1
topBar.BorderSizePixel = 0
topBar.Parent = mainFrame
local topBarCorner = Instance.new("UICorner")
topBarCorner.CornerRadius = UDim.new(0, 20)
topBarCorner.Parent = topBar

local topIcon = Instance.new("ImageLabel")
topIcon.Size = UDim2.new(0, 30, 0, 30)
topIcon.Position = UDim2.new(0, 10, 0.5, -15)
topIcon.BackgroundTransparency = 1
topIcon.Image = "rbxassetid://105218292132797"
topIcon.Parent = topBar

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 200, 1, 0)
titleLabel.Position = UDim2.new(0, 50, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "ICED HUB❄️"
titleLabel.TextColor3 = Colors.Text
titleLabel.Font = Enum.Font.GothamBlack
titleLabel.TextSize = 22
titleLabel.Parent = topBar

-- Draggable
local dragging, dragInput, dragStart, startPos
topBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)
topBar.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
topBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Notification System
local notifications = {}
local function createNotification(message, duration)
    duration = duration or 3
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0, 220, 0, 60)
    notif.Position = UDim2.new(1, 230, 1, -70)
    notif.BackgroundColor3 = Colors.Secondary
    notif.BackgroundTransparency = 0.2
    notif.Parent = screenGui
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 12)
    notifCorner.Parent = notif
    local notifStroke = Instance.new("UIStroke")
    notifStroke.Thickness = 1.5
    notifStroke.Color = Colors.Accent
    notifStroke.Transparency = 0.4
    notifStroke.Parent = notif

    local text = Instance.new("TextLabel")
    text.Size = UDim2.new(1, -20, 1, -10)
    text.Position = UDim2.new(0, 10, 0, 5)
    text.BackgroundTransparency = 1
    text.Text = message
    text.TextColor3 = Colors.Text
    text.Font = Enum.Font.Gotham
    text.TextSize = 14
    text.TextWrapped = true
    text.Parent = notif

    table.insert(notifications, notif)
    for i, n in ipairs(notifications) do
        TS:Create(n, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            Position = UDim2.new(1, -230, 1, -70 - (i-1) * 70)
        }):Play()
    end

    spawn(function()
        wait(duration)
        TS:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 230, 1, -70)
        }):Play()
        wait(0.5)
        table.remove(notifications, table.find(notifications, notif))
        notif:Destroy()
        for i, n in ipairs(notifications) do
            TS:Create(n, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {
                Position = UDim2.new(1, -230, 1, -70 - (i-1) * 70)
            }):Play()
        end
    end)
end

-- Toggle Function
local function createToggle(parent, posY, labelText, callback)
    local toggleContainer = Instance.new("Frame")
    toggleContainer.Size = UDim2.new(1, -40, 0, 60)
    toggleContainer.Position = UDim2.new(0, 20, 0, posY)
    toggleContainer.BackgroundColor3 = Colors.Secondary
    toggleContainer.BackgroundTransparency = 0.3
    toggleContainer.Parent = parent
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 12)
    containerCorner.Parent = toggleContainer

    local toggleSwitch = Instance.new("TextButton")
    toggleSwitch.Size = UDim2.new(0, 60, 0, 28)
    toggleSwitch.Position = UDim2.new(1, -70, 0.5, -14)
    toggleSwitch.BackgroundColor3 = Colors.Secondary
    toggleSwitch.Text = ""
    toggleSwitch.Parent = toggleContainer
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(0, 14)
    switchCorner.Parent = toggleSwitch

    local toggleKnob = Instance.new("Frame")
    toggleKnob.Size = UDim2.new(0, 24, 0, 24)
    toggleKnob.Position = UDim2.new(0, 2, 0.5, -12)
    toggleKnob.BackgroundColor3 = Colors.Text
    toggleKnob.Parent = toggleSwitch
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 12)
    knobCorner.Parent = toggleKnob

    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0, 300, 0, 20)
    toggleLabel.Position = UDim2.new(0, 10, 0.5, -10)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = labelText
    toggleLabel.TextColor3 = Colors.Text
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextSize = 16
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleContainer

    local toggleState = false
    toggleSwitch.MouseButton1Click:Connect(function()
        toggleState = not toggleState
        TS:Create(toggleKnob, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            Position = UDim2.new(0, toggleState and 34 or 2, 0.5, -12)
        }):Play()
        TS:Create(toggleSwitch, TweenInfo.new(0.2), {
            BackgroundColor3 = toggleState and Colors.Accent or Colors.Secondary
        }):Play()
        createNotification(labelText .. " " .. (toggleState and "Enabled" or "Disabled"))
        if callback then callback(toggleState) end
    end)
end

-- Dropdown Function (Smooth, Goes Over Button)
local function createDropdown(parent, posY, labelText, options, callback)
    local dropdownContainer = Instance.new("Frame")
    dropdownContainer.Size = UDim2.new(1, -40, 0, 60)
    dropdownContainer.Position = UDim2.new(0, 20, 0, posY)
    dropdownContainer.BackgroundColor3 = Colors.Secondary
    dropdownContainer.BackgroundTransparency = 0.3
    dropdownContainer.Parent = parent
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 12)
    containerCorner.Parent = dropdownContainer

    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Size = UDim2.new(1, -20, 0, 40)
    dropdownButton.Position = UDim2.new(0, 10, 0.5, -20)
    dropdownButton.BackgroundColor3 = Colors.Primary
    dropdownButton.Text = labelText
    dropdownButton.TextColor3 = Colors.Text
    dropdownButton.Font = Enum.Font.GothamSemibold
    dropdownButton.TextSize = 16
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Parent = dropdownContainer
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 10)
    btnCorner.Parent = dropdownButton

    local arrow = Instance.new("ImageLabel")
    arrow.Size = UDim2.new(0, 16, 0, 16)
    arrow.Position = UDim2.new(1, -30, 0.5, -8)
    arrow.BackgroundTransparency = 1
    arrow.Image = "rbxassetid://7733798720" -- Down arrow icon
    arrow.Parent = dropdownButton

    local dropdownList = Instance.new("Frame")
    dropdownList.Size = UDim2.new(1, -20, 0, 0)
    dropdownList.Position = UDim2.new(0, 10, 1, 0) -- Positioned directly below button
    dropdownList.BackgroundColor3 = Colors.Secondary
    dropdownList.BackgroundTransparency = 0.1
    dropdownList.Visible = false
    dropdownList.ClipsDescendants = true
    dropdownList.ZIndex = 2 -- Ensure it’s above other elements
    dropdownList.Parent = dropdownContainer
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 10)
    listCorner.Parent = dropdownList

    local listStroke = Instance.new("UIStroke")
    listStroke.Thickness = 1.5
    listStroke.Color = Colors.Accent
    listStroke.Transparency = 0.6
    listStroke.Parent = dropdownList

    local listPadding = Instance.new("UIPadding")
    listPadding.PaddingTop = UDim.new(0, 5)
    listPadding.PaddingBottom = UDim.new(0, 5)
    listPadding.Parent = dropdownList

    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.ScrollBarThickness = 4
    scrollingFrame.ScrollBarImageColor3 = Colors.Accent
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 37)
    scrollingFrame.ZIndex = 2
    scrollingFrame.Parent = dropdownList

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 2)
    listLayout.Parent = scrollingFrame

    local selectedOption = labelText
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, -10, 0, 35)
        optionButton.Position = UDim2.new(0, 5, 0, (i-1) * 37)
        optionButton.BackgroundColor3 = Colors.Secondary
        optionButton.BackgroundTransparency = 0.2
        optionButton.Text = option
        optionButton.TextColor3 = Colors.TextSecondary
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextSize = 14
        optionButton.ZIndex = 2
        optionButton.Parent = scrollingFrame

        local optCorner = Instance.new("UICorner")
        optCorner.CornerRadius = UDim.new(0, 8)
        optCorner.Parent = optionButton

        optionButton.MouseButton1Click:Connect(function()
            selectedOption = option
            dropdownButton.Text = option
            dropdownList.Visible = false
            TS:Create(dropdownList, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                Size = UDim2.new(1, -20, 0, 0)
            }):Play()
            TS:Create(arrow, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Rotation = 0}):Play()
            createNotification("Selected: " .. option)
            if callback then callback(option) end
        end)

        optionButton.MouseEnter:Connect(function()
            TS:Create(optionButton, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {
                BackgroundColor3 = Colors.Accent,
                BackgroundTransparency = 0,
                TextColor3 = Colors.Text
            }):Play()
        end)
        optionButton.MouseLeave:Connect(function()
            TS:Create(optionButton, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {
                BackgroundColor3 = Colors.Secondary,
                BackgroundTransparency = 0.2,
                TextColor3 = Colors.TextSecondary
            }):Play()
        end)
    end

    local dropdownOpen = false
    dropdownButton.MouseButton1Click:Connect(function()
        dropdownOpen = not dropdownOpen
        dropdownList.Visible = dropdownOpen
        local targetSize = dropdownOpen and UDim2.new(1, -20, 0, math.min(#options * 37, 150)) or UDim2.new(1, -20, 0, 0)
        TS:Create(dropdownList, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            Size = targetSize
        }):Play()
        TS:Create(arrow, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {
            Rotation = dropdownOpen and 180 or 0
        }):Play()
        TS:Create(dropdownButton, TweenInfo.new(0.2), {
            BackgroundColor3 = dropdownOpen and Colors.Accent or Colors.Primary
        }):Play()
    end)

    dropdownButton.MouseEnter:Connect(function()
        if not dropdownOpen then
            TS:Create(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = Colors.AccentHover}):Play()
        end
    end)
    dropdownButton.MouseLeave:Connect(function()
        if not dropdownOpen then
            TS:Create(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = Colors.Primary}):Play()
        end
    end)

    return dropdownContainer, function() return selectedOption end
end

-- Button Function with Ripple Effect
local function createButton(parent, posY, text, callback)
    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(0, 180, 0, 50)
    buttonContainer.Position = UDim2.new(0, 20, 0, posY)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = parent

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundColor3 = Colors.Accent
    button.Text = text
    button.TextColor3 = Colors.Text
    button.Font = Enum.Font.GothamBold
    button.TextSize = 16
    button.ZIndex = 1 -- Ensure button is below dropdown
    button.Parent = buttonContainer
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 12)
    btnCorner.Parent = button

    local ripple = Instance.new("Frame")
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.BackgroundColor3 = Colors.Text
    ripple.BackgroundTransparency = 0.7
    ripple.Visible = false
    ripple.ZIndex = 2
    ripple.Parent = button
    local rippleCorner = Instance.new("UICorner")
    rippleCorner.CornerRadius = UDim.new(1, 0)
    rippleCorner.Parent = ripple

    button.MouseButton1Click:Connect(function()
        local mousePos = UIS:GetMouseLocation()
        local relativePos = mousePos - button.AbsolutePosition
        ripple.Position = UDim2.new(0, relativePos.X, 0, relativePos.Y)
        ripple.Visible = true
        TS:Create(ripple, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 100, 0, 100),
            BackgroundTransparency = 1
        }):Play()
        wait(0.5)
        ripple.Visible = false
        ripple.Size = UDim2.new(0, 0, 0, 0)
        callback()
        createNotification(text .. " Clicked")
    end)

    button.MouseEnter:Connect(function()
        TS:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            BackgroundColor3 = Colors.AccentHover,
            Size = UDim2.new(1, 5, 1, 5)
        }):Play()
    end)
    button.MouseLeave:Connect(function()
        TS:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            BackgroundColor3 = Colors.Accent,
            Size = UDim2.new(1, 0, 1, 0)
        }):Play()
    end)
end

-- Initial Notification
createNotification("ICED HUB❄️👑 Loaded Successfully!")
