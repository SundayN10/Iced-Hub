local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "IcedHub"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

local TS = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Color Palette
local Colors = {
    Primary = Color3.fromRGB(20, 20, 30),
    Secondary = Color3.fromRGB(30, 30, 40),
    Accent = Color3.fromRGB(0, 170, 255),
    AccentHover = Color3.fromRGB(0, 190, 255),
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(180, 180, 180),
    Success = Color3.fromRGB(0, 255, 150),
    Warning = Color3.fromRGB(255, 100, 100)
}

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 650, 0, 450)
mainFrame.Position = UDim2.new(0.5, -325, 0.5, -225)
mainFrame.BackgroundColor3 = Colors.Primary
mainFrame.BackgroundTransparency = 0.1
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui
mainFrame.Visible = false

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 20)
uiCorner.Parent = mainFrame

local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Colors.Primary),
    ColorSequenceKeypoint.new(1, Colors.Secondary)
}
uiGradient.Rotation = 45
uiGradient.Parent = mainFrame

local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 2
uiStroke.Color = Colors.Accent
uiStroke.Transparency = 0.5
uiStroke.Parent = mainFrame

-- Toggle Button
local toggleGui = Instance.new("TextButton")
toggleGui.Size = UDim2.new(0, 60, 0, 60)
toggleGui.Position = UDim2.new(0, 20, 0.5, -30)
toggleGui.BackgroundColor3 = Colors.Accent
toggleGui.Text = "❄️"
toggleGui.TextColor3 = Colors.Text
toggleGui.Font = Enum.Font.GothamBold
toggleGui.TextSize = 24
toggleGui.Parent = screenGui
local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(1, 0)
toggleCorner.Parent = toggleGui

local isOpen = false
toggleGui.MouseButton1Click:Connect(function()
    isOpen = not isOpen
    mainFrame.Visible = isOpen
    toggleGui.Text = isOpen and "✖" or "❄️"
    TS:Create(toggleGui, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        BackgroundColor3 = isOpen and Colors.Success or Colors.Accent,
        Size = isOpen and UDim2.new(0, 55, 0, 55) or UDim2.new(0, 60, 0, 60)
    }):Play()
end)

-- Top Bar
local topBar = Instance.new("Frame")
topBar.Size = UDim2.new(1, 0, 0, 50)
topBar.BackgroundColor3 = Colors.Secondary
topBar.BackgroundTransparency = 0.1
topBar.BorderSizePixel = 0
topBar.Parent = mainFrame
local topBarCorner = Instance.new("UICorner")
topBarCorner.CornerRadius = UDim.new(0, 20)
topBarCorner.Parent = topBar

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(0, 200, 1, 0)
titleLabel.Position = UDim2.new(0, 20, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "ICED HUB ❄️"
titleLabel.TextColor3 = Colors.Text
titleLabel.Font = Enum.Font.GothamBlack
titleLabel.TextSize = 22
titleLabel.Parent = topBar

-- Draggable
local dragging, dragInput, dragStart, startPos
topBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)
topBar.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
topBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Sidebar
local sidebar = Instance.new("Frame")
sidebar.Size = UDim2.new(0, 160, 1, -50)
sidebar.Position = UDim2.new(0, 0, 0, 50)
sidebar.BackgroundColor3 = Colors.Secondary
sidebar.BackgroundTransparency = 0.3
sidebar.Parent = mainFrame
local sidebarGradient = Instance.new("UIGradient")
sidebarGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Colors.Secondary),
    ColorSequenceKeypoint.new(1, Colors.Primary)
}
sidebarGradient.Parent = sidebar

-- Content Area
local content = Instance.new("Frame")
content.Size = UDim2.new(0, 490, 1, -50)
content.Position = UDim2.new(0, 160, 0, 50)
content.BackgroundTransparency = 1
content.ClipsDescendants = true
content.Parent = mainFrame

-- Notification System
local notifications = {}
local function createNotification(message, duration)
    duration = duration or 3
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0, 220, 0, 60)
    notif.Position = UDim2.new(1, 230, 1, -70)
    notif.BackgroundColor3 = Colors.Secondary
    notif.BackgroundTransparency = 0.2
    notif.Parent = screenGui
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 12)
    notifCorner.Parent = notif
    local notifStroke = Instance.new("UIStroke")
    notifStroke.Thickness = 1.5
    notifStroke.Color = Colors.Accent
    notifStroke.Transparency = 0.4
    notifStroke.Parent = notif

    local text = Instance.new("TextLabel")
    text.Size = UDim2.new(1, -20, 1, -10)
    text.Position = UDim2.new(0, 10, 0, 5)
    text.BackgroundTransparency = 1
    text.Text = message
    text.TextColor3 = Colors.Text
    text.Font = Enum.Font.Gotham
    text.TextSize = 14
    text.TextWrapped = true
    text.Parent = notif

    table.insert(notifications, notif)
    for i, n in ipairs(notifications) do
        TS:Create(n, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            Position = UDim2.new(1, -230, 1, -70 - (i-1) * 70)
        }):Play()
    end

    spawn(function()
        wait(duration)
        TS:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 230, 1, -70)
        }):Play()
        wait(0.5)
        table.remove(notifications, table.find(notifications, notif))
        notif:Destroy()
        for i, n in ipairs(notifications) do
            TS:Create(n, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {
                Position = UDim2.new(1, -230, 1, -70 - (i-1) * 70)
            }):Play()
        end
    end)
end

-- Initial Notification
createNotification("ICED HUB Loaded Successfully!")
